(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{165:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),e("ul",[e("li",[e("p",[t._v("首先贴原文地址。用我笨拙的英语翻译下，方便不懂英语的童鞋理解，如有更好的翻译可以轻拍砖。。。\n"),e("a",{attrs:{href:"https://stackoverflow.com/questions/14876112/angularjs-difference-between-the-observe-and-watch-methods",target:"_blank",rel:"noopener noreferrer"}},[t._v("stackOverFlow question"),e("OutboundLink")],1)])]),e("li",[e("p",[e("a",{attrs:{href:"https://docs.angularjs.org/api/ng.$compile.directive.Attributes#$observe",target:"_blank",rel:"noopener noreferrer"}},[t._v("$observe()"),e("OutboundLink")],1),t._v(" 是 "),e("a",{attrs:{href:"http://docs.angularjs.org/api/ng.$compile.directive.Attributes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Attrbutes"),e("OutboundLink")],1),t._v(" 对象的一个方法,因此，它只能被用于观察 DOM 的 attribute 属性的值的改变，只在指令内部使用或调用。当你需要观察一个 DOM 的 attribute 包含插入值（例如")])])]),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),e("ul",[t._m(10),t._m(11),t._m(12),e("li",[e("p",[t._v("为了帮助我们验证所有这些，作者写了一个 "),e("a",{attrs:{href:"http://plnkr.co/edit/HBha8sVdeCqhJtQghGxw?p=preview",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),e("OutboundLink")],1),t._v("。定义了两个指令，d1 指令没有创造一个新的 "),e("code",[t._v("scope")]),t._v("，d2 新创造了一个独立的 "),e("code",[t._v("scope")]),t._v("。每个指令都有相同的6个 "),e("code",[t._v("attributes")]),t._v(" 属性。每个属性都被 "),e("code",[t._v("$watch")]),t._v(" 和 "),e("code",[t._v("$observe")]),t._v("。")])])]),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"关于-angularjs-的-observe-和-watch-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-angularjs-的-observe-和-watch-的区别","aria-hidden":"true"}},[this._v("#")]),this._v(" 关于 angularJS 的 $observe 和 $watch 的区别")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("attr1"),s("span",{attrs:{class:"token operator"}},[this._v("=")]),s("span",{attrs:{class:"token string"}},[this._v('"Name: {{name}}"')]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("然后在指令内部 "),e("code",[t._v("attrs.$observe(attrs, ...)")]),t._v(" 假如你试着在指令内部 "),e("code",[t._v("scope.$watch(attrs.attr1, ...)")]),t._v(" 这样是不会起作用的，只会得到  "),e("code",[t._v("undefined")]),t._v("。")])]),e("li",[e("p",[e("code",[t._v("$watch")]),t._v(" 就比较复杂了，它可以观察表达式，也就是可以是一个 function 函数 或者 string 字符串。如果表达式是一个字符串，它将被解析为一个 function（这个 function 会在每次 digest 循环都被执行）。字符串不能包含 {{}}。"),e("code",[t._v("$watch")]),t._v(" 是 scope 上面的一个方法，因此可以用在一个控制器 controller 上面，通过 "),e("code",[t._v("ng-view")]),t._v("，"),e("code",[t._v("ng-controller")]),t._v(" 或一个指令的控制器在指令的 link 函数，因为它也可以连接到 scope。")])]),e("li",[e("p",[t._v("因为字符串被当做 angular 的表达式，"),e("code",[t._v("$watch")]),t._v(" 通常被用于你想观察一个 model 数据模型 或者作用域 scope 的属性（例如：")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("attr1"),s("span",{attrs:{class:"token operator"}},[this._v("=")]),s("span",{attrs:{class:"token string"}},[this._v('"myModel.some_prop"')]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("然后")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("link "),e("span",{attrs:{class:"token keyword"}},[t._v("function")]),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" scope"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("$watch")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'myModel.some_prop'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("...")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("或者")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("scope"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("$watch")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attr1"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("...")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ）\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("假如你试着")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("attrs"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),s("span",{attrs:{class:"token function"}},[this._v("$observe")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),s("span",{attrs:{class:"token string"}},[this._v("'attr1'")]),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("你将会得到字符串 "),s("code",[this._v("myModel.some_prop")]),this._v("，这应该不是你想要的。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("所有的 "),s("code",[this._v("$observe")]),this._v(" 和 "),s("code",[this._v("$watch")]),this._v(" 在每次 "),s("code",[this._v("digest")]),this._v(" 循环都会被检测。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("li",[e("p",[t._v("独立作用域的指令更复杂。假如使用了 "),e("code",[t._v("@")]),t._v(" 符号，你可以使用 "),e("code",[t._v("$observe")]),t._v(" 或者 "),e("code",[t._v("$watch")]),t._v(" 一个 DOM 被插入的属性， "),e("code",[t._v("$watch")]),t._v(" 也可以工作的原因是由于 "),e("code",[t._v("@")]),t._v(" 符号帮助我们做了注入( interpolation ),因此 "),e("code",[t._v("$watch")]),t._v(" 可以看到没有 {{}} 的字符串。（这里翻译的不知道对不对，请指正）。为了更容易记住何时使用，我建议在这种情况下也使用 "),e("code",[t._v("$observe")]),t._v("。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div d1 attr1"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"{{prop1}}-test"')]),t._v(" attr2"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"prop2"')]),t._v(" attr3"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"33"')]),t._v(" attr4"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v("\"'a_string'\"")]),t._v("\n        attr5"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"a_string"')]),t._v(" attr6"),e("span",{attrs:{class:"token operator"}},[t._v("=")]),e("span",{attrs:{class:"token string"}},[t._v('"{{1+aNumber}}"')]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("打开控制台的 "),e("code",[t._v("console")]),t._v(" 标签页查看 "),e("code",[t._v("$observe")]),t._v(" 和 "),e("code",[t._v("$watch")]),t._v(" 在 "),e("code",[t._v("link")]),t._v(" 函数中不同的表现。然后点击链接查看属性改变后被 "),e("code",[t._v("click")]),t._v(" 方法触发后的  "),e("code",[t._v("$observe")]),t._v(" 和 "),e("code",[t._v("$watch")]),t._v("。")])]),e("li",[e("p",[t._v("注意当 link 函数运行时，所有包含的 {{}} 还没有被执行。查看插入值的唯一方法是使用 "),e("code",[t._v("$observe")]),t._v("（或者 "),e("code",[t._v("$watch")]),t._v(" ,假如你使用的是独立的 "),e("code",[t._v("scope")]),t._v(" 和 "),e("code",[t._v("@")]),t._v("）。因此，获得这些属性值是一个异步的操作。")])]),e("li",[e("p",[t._v("有时你不需要 "),e("code",[t._v("$observe")]),t._v(" 或者 "),e("code",[t._v("$watch")]),t._v("。比方说你的 "),e("code",[t._v("attribute")]),t._v(" 包含一个数字 或者 布尔值，相当于在你的 link 函数里面")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" scope"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("$eval")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attr1"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("假如只是一个常量字符串(例如")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("attr1"),s("span",{attrs:{class:"token operator"}},[this._v("=")]),s("span",{attrs:{class:"token string"}},[this._v('"my string"')]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("那就直接在你的指令里使用 "),s("code",[this._v("attrs.attr1")]),this._v("，不需要使用 "),s("code",[this._v("$eval()")]),this._v("。")])])}],!1,null,null,null);s.default=n.exports}}]);